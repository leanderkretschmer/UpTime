#!/usr/bin/env python3
import subprocess
import json
import sys
from alerta_sender import send_alert, map_status

def run_check(check_name, *args):
    """Führt einen Check aus und sendet das Ergebnis an Alerta"""
    try:
        # Check ausführen
        cmd = [f"/opt/monitoring/plugins/{check_name}"] + list(args)
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        # Output parsen
        output = result.stdout.strip()
        status = "UNKNOWN"
        
        if "OK -" in output:
            status = "OK"
        elif "WARNING -" in output:
            status = "WARNING"
        elif "CRITICAL -" in output:
            status = "CRITICAL"
            
        # Performance-Daten extrahieren
        perf_data = {}
        if "|" in output:
            message, metrics = output.split("|", 1)
            for metric in metrics.split():
                key, value = metric.split("=", 1)
                perf_data[key] = value.split(";")[0]
        else:
            message = output
            
        # Alert Template auswählen
        if check_name == "check_service.sh":
            template = "service_down" if status != "OK" else None
            kwargs = {
                "service_name": args[0],
                "status": status,
                "message": message
            }
        elif check_name == "check_custom_ping.sh":
            template = "high_ping" if status != "OK" else None
            kwargs = {
                "host": args[0],
                "ping_ms": perf_data.get("response_time", "unknown"),
                "message": message
            }
        else:
            template = None
            
        # Alert senden wenn nötig
        if template:
            send_alert(template, **kwargs)
            
        return {
            "status": status,
            "message": message,
            "perf_data": perf_data
        }
        
    except Exception as e:
        return {
            "status": "UNKNOWN",
            "message": f"Check execution failed: {str(e)}",
            "perf_data": {}
        }

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: check_wrapper.py CHECK_NAME [ARGS...]")
        sys.exit(3)
        
    check_name = sys.argv[1]
    check_args = sys.argv[2:]
    
    result = run_check(check_name, *check_args)
    print(json.dumps(result))
    
    # Exit-Code basierend auf Status
    status_codes = {
        "OK": 0,
        "WARNING": 1,
        "CRITICAL": 2,
        "UNKNOWN": 3
    }
    sys.exit(status_codes.get(result["status"], 3)) 