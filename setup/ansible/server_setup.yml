---
- name: Setup Monitoring System
  hosts: monitoring_server
  become: yes
  vars:
    git_repo: "https://github.com/leanderkretschmer/UpTime/"
    tmp_dir: "/tmp/monitoring_setup"
    frontend_dir: "/opt/monitoring/frontend"
    backend_dir: "/opt/monitoring/backend"
    python_version: "3.8"
    node_version: "16"

  tasks:
    - name: Install required packages
      apt:
        name:
          - git
          - python3
          - python3-pip
          - python3-venv
          - nodejs
          - npm
          - postgresql
          - postgresql-contrib
          - rsync
          - postgresql-server-dev-all
          - libpq-dev
          - python3-dev
          - gcc
        state: present
        update_cache: yes

    - name: Remove old temporary directory if exists
      file:
        path: "{{ tmp_dir }}"
        state: absent

    - name: Create temporary directory
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

    - name: Clone repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ tmp_dir }}"
        version: main

    - name: Debug repository content
      command: ls -la {{ tmp_dir }}
      register: repo_content

    - name: Show repository content
      debug:
        var: repo_content.stdout_lines

    - name: Create backend directory
      file:
        path: "{{ backend_dir }}"
        state: directory
        mode: '0755'

    - name: Create frontend directory
      file:
        path: "{{ frontend_dir }}"
        state: directory
        mode: '0755'

    - name: Copy backend files
      shell: "cp -r {{ tmp_dir }}/backend/* {{ backend_dir }}/ || true"

    - name: Install Vite globally
      npm:
        name: create-vite
        global: yes
        state: present

    - name: Create Vue project directory
      file:
        path: "{{ frontend_dir }}"
        state: directory
        mode: '0755'

    - name: Initialize Vue.js project with Vite
      shell: |
        cd {{ frontend_dir }}
        npm init vite@latest . --template vue-ts -- --force < /dev/null
      args:
        creates: "{{ frontend_dir }}/package.json"

    - name: Copy frontend files
      shell: "cp -r {{ tmp_dir }}/frontend/* {{ frontend_dir }}/ || true"

    - name: Create requirements.txt
      copy:
        dest: "{{ backend_dir }}/requirements.txt"
        content: |
          flask==2.0.1
          flask-cors==3.0.10
          flask-jwt-extended==4.3.1
          flask-sqlalchemy==2.5.1
          psycopg2-binary==2.9.1
          ansible-runner==2.1.1
          python-dotenv==0.19.0
          gunicorn==20.1.0

    - name: Setup Python virtual environment
      pip:
        requirements: "{{ backend_dir }}/requirements.txt"
        virtualenv: "{{ backend_dir }}/venv"
        virtualenv_command: python3 -m venv

    - name: Create package.json for frontend
      copy:
        dest: "{{ frontend_dir }}/package.json"
        content: |
          {
            "name": "uptime-frontend",
            "version": "0.0.1",
            "private": true,
            "scripts": {
              "dev": "vite",
              "build": "vue-tsc && vite build",
              "preview": "vite preview"
            },
            "dependencies": {
              "vue": "^3.3.4",
              "vue-router": "^4.0.0",
              "pinia": "^2.0.0",
              "@heroicons/vue": "^2.0.0",
              "axios": "^1.0.0",
              "@headlessui/vue": "^1.0.0"
            },
            "devDependencies": {
              "@vitejs/plugin-vue": "^4.2.3",
              "typescript": "^5.0.2",
              "vite": "^4.4.5",
              "vue-tsc": "^1.8.5",
              "tailwindcss": "^3.0.0",
              "postcss": "^8.0.0",
              "autoprefixer": "^10.0.0"
            }
          }

    - name: Install frontend dependencies
      npm:
        path: "{{ frontend_dir }}"
        state: present

    - name: Build frontend
      command: npm run build
      args:
        chdir: "{{ frontend_dir }}"

    - name: Initialize database
      command: "{{ backend_dir }}/venv/bin/python {{ backend_dir }}/init_db.py"
      environment:
        PYTHONPATH: "{{ backend_dir }}"

    - name: Clean up temporary directory
      file:
        path: "{{ tmp_dir }}"
        state: absent

    - name: Create systemd service for backend
      template:
        src: backend.service.j2
        dest: /etc/systemd/system/monitoring-backend.service
      notify: Restart backend service

  handlers:
    - name: Restart backend service
      systemd:
        name: monitoring-backend
        state: restarted
        daemon_reload: yes
        enabled: yes 