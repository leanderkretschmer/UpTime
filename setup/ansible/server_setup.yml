---
- name: Setup Monitoring System
  hosts: monitoring_server
  become: yes
  vars:
    git_repo: "https://github.com/leanderkretschmer/UpTime/"
    tmp_dir: "/tmp/monitoring_setup"
    frontend_dir: "/opt/monitoring/frontend"
    backend_dir: "/opt/monitoring/backend"
    db_user: "uptime_user"
    db_password: "your_password"
    db_name: "uptime"

  pre_tasks:
    - name: Install Python PostgreSQL dependencies
      apt:
        name:
          - python3-psycopg2
          - acl
        state: present
        update_cache: yes

  tasks:
    - name: Install required packages
      apt:
        name:
          - git
          - python3
          - python3-pip
          - python3-venv
          - nodejs
          - npm
          - postgresql
          - postgresql-contrib
          - rsync
          - postgresql-server-dev-all
          - libpq-dev
          - python3-dev
          - gcc
        state: present
        update_cache: yes

    - name: Remove old temporary directory if exists
      file:
        path: "{{ tmp_dir }}"
        state: absent

    - name: Create temporary directory
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

    - name: Clone repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ tmp_dir }}"
        version: main

    - name: Debug repository content
      command: ls -la {{ tmp_dir }}
      register: repo_content

    - name: Show repository content
      debug:
        var: repo_content.stdout_lines

    - name: Create backend directory
      file:
        path: "{{ backend_dir }}"
        state: directory
        mode: '0755'

    - name: Create init_db.py
      copy:
        dest: "{{ backend_dir }}/init_db.py"
        content: |
          from app import app, db
          
          def init_db():
              with app.app_context():
                  db.create_all()
                  print("Database initialized!")
          
          if __name__ == '__main__':
              init_db()

    - name: Create app.py
      copy:
        dest: "{{ backend_dir }}/app.py"
        content: |
          from flask import Flask, request, jsonify
          from flask_cors import CORS
          from flask_jwt_extended import JWTManager
          from flask_sqlalchemy import SQLAlchemy
          from datetime import timedelta
          import os
          from dotenv import load_dotenv
          
          load_dotenv()
          
          app = Flask(__name__)
          CORS(app)
          
          app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'postgresql://uptime_user:your_password@localhost/uptime')
          app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'your-secret-key')
          app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(days=1)
          
          jwt = JWTManager(app)
          db = SQLAlchemy(app)

    - name: Create models.py
      copy:
        dest: "{{ backend_dir }}/models.py"
        content: |
          from app import db
          from werkzeug.security import generate_password_hash, check_password_hash
          
          class User(db.Model):
              id = db.Column(db.Integer, primary_key=True)
              username = db.Column(db.String(80), unique=True, nullable=False)
              password_hash = db.Column(db.String(120), nullable=False)
              
              def set_password(self, password):
                  self.password_hash = generate_password_hash(password)
                  
              def check_password(self, password):
                  return check_password_hash(self.password_hash, password)

    - name: Ensure PostgreSQL is started
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Create PostgreSQL user
      become: yes
      become_user: postgres
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        role_attr_flags: CREATEDB,NOSUPERUSER

    - name: Create PostgreSQL database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{ db_name }}"
        owner: "{{ db_user }}"
        encoding: UTF8
        template: template0

    - name: Create .env for backend
      copy:
        dest: "{{ backend_dir }}/.env"
        content: |
          DATABASE_URL=postgresql://{{ db_user }}:{{ db_password }}@localhost/{{ db_name }}
          JWT_SECRET_KEY=your-secret-key
          FLASK_ENV=development

    - name: Create requirements.txt
      copy:
        dest: "{{ backend_dir }}/requirements.txt"
        content: |
          flask==2.3.3
          werkzeug==2.3.7
          flask-cors==4.0.0
          flask-jwt-extended==4.5.2
          flask-sqlalchemy==3.0.5
          psycopg2-binary==2.9.9
          ansible-runner==2.3.4
          python-dotenv==1.0.0
          gunicorn==21.2.0

    - name: Setup Python virtual environment
      pip:
        requirements: "{{ backend_dir }}/requirements.txt"
        virtualenv: "{{ backend_dir }}/venv"
        virtualenv_command: python3 -m venv

    - name: Initialize database
      command: "{{ backend_dir }}/venv/bin/python {{ backend_dir }}/init_db.py"
      environment:
        PYTHONPATH: "{{ backend_dir }}"

    - name: Create backend directory
      file:
        path: "{{ backend_dir }}"
        state: directory
        mode: '0755'

    - name: Create frontend directory
      file:
        path: "{{ frontend_dir }}"
        state: directory
        mode: '0755'

    - name: Copy backend files
      shell: "cp -r {{ tmp_dir }}/backend/* {{ backend_dir }}/ || true"

    - name: Install Vite globally
      npm:
        name: create-vite
        global: yes
        state: present

    - name: Create Vue.js project structure
      file:
        path: "{{ frontend_dir }}/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - src
        - src/components
        - src/views
        - src/stores
        - src/assets
        - public

    - name: Create App.vue
      copy:
        dest: "{{ frontend_dir }}/src/App.vue"
        content: |
          <template>
            <div>
              <!-- ... Rest des App.vue Inhalts ... -->
            </div>
          </template>

    - name: Create Settings.vue
      copy:
        dest: "{{ frontend_dir }}/src/views/Settings.vue"
        content: |
          <template>
            <div>
              <!-- ... Rest des Settings.vue Inhalts ... -->
            </div>
          </template>

    - name: Create index.html
      copy:
        dest: "{{ frontend_dir }}/index.html"
        content: |
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <link rel="icon" type="image/svg+xml" href="/vite.svg" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>UpTime Monitoring</title>
            </head>
            <body>
              <div id="app"></div>
              <script type="module" src="/src/main.ts"></script>
            </body>
          </html>

    - name: Create main.ts
      copy:
        dest: "{{ frontend_dir }}/src/main.ts"
        content: |
          import { createApp } from 'vue'
          import App from './App.vue'
          
          createApp(App).mount('#app')

    - name: Create vite.config.ts
      copy:
        dest: "{{ frontend_dir }}/vite.config.ts"
        content: |
          import { defineConfig } from 'vite'
          import vue from '@vitejs/plugin-vue'
          
          export default defineConfig({
            plugins: [vue()],
          })

    - name: Create tsconfig.json
      copy:
        dest: "{{ frontend_dir }}/tsconfig.json"
        content: |
          {
            "compilerOptions": {
              "target": "ES2020",
              "useDefineForClassFields": true,
              "module": "ESNext",
              "lib": ["ES2020", "DOM", "DOM.Iterable"],
              "skipLibCheck": true,
              "moduleResolution": "bundler",
              "allowImportingTsExtensions": true,
              "resolveJsonModule": true,
              "isolatedModules": true,
              "noEmit": true,
              "jsx": "preserve",
              "strict": true,
              "noUnusedLocals": true,
              "noUnusedParameters": true,
              "noFallthroughCasesInSwitch": true
            },
            "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"],
            "references": [{ "path": "./tsconfig.node.json" }]
          }

    - name: Create tsconfig.node.json
      copy:
        dest: "{{ frontend_dir }}/tsconfig.node.json"
        content: |
          {
            "compilerOptions": {
              "composite": true,
              "skipLibCheck": true,
              "module": "ESNext",
              "moduleResolution": "bundler",
              "allowSyntheticDefaultImports": true
            },
            "include": ["vite.config.ts"]
          }

    - name: Create package.json for frontend
      copy:
        dest: "{{ frontend_dir }}/package.json"
        content: |
          {
            "name": "uptime-frontend",
            "version": "0.0.1",
            "private": true,
            "type": "module",
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview"
            },
            "dependencies": {
              "vue": "^3.3.4",
              "vue-router": "^4.0.0",
              "pinia": "^2.0.0",
              "@heroicons/vue": "^2.0.0",
              "axios": "^1.0.0",
              "@headlessui/vue": "^1.0.0"
            },
            "devDependencies": {
              "@vitejs/plugin-vue": "^4.2.3",
              "typescript": "^5.0.2",
              "vite": "^4.4.5",
              "tailwindcss": "^3.0.0",
              "postcss": "^8.0.0",
              "autoprefixer": "^10.0.0"
            }
          }

    - name: Set correct ownership and permissions
      file:
        path: "{{ item }}"
        owner: root
        group: root
        recurse: yes
        mode: '0755'
      with_items:
        - "{{ frontend_dir }}"
        - "{{ backend_dir }}"

    - name: Install frontend dependencies
      npm:
        path: "{{ frontend_dir }}"
        state: present
      become: yes

    - name: Create npm start script
      copy:
        dest: "/usr/local/bin/start-frontend"
        mode: '0755'
        content: |
          #!/bin/bash
          cd {{ frontend_dir }}
          npm run dev

    - name: Build frontend
      command: npm run build
      args:
        chdir: "{{ frontend_dir }}"

    - name: Copy frontend files
      shell: "cp -r {{ tmp_dir }}/frontend/* {{ frontend_dir }}/ || true"

    - name: Clean up temporary directory
      file:
        path: "{{ tmp_dir }}"
        state: absent

    - name: Create systemd service for backend
      template:
        src: backend.service.j2
        dest: /etc/systemd/system/monitoring-backend.service
      notify: Restart backend service

    - name: Install nginx
      apt:
        name: nginx
        state: present

    - name: Configure nginx
      copy:
        dest: /etc/nginx/sites-available/uptime
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  root {{ frontend_dir }}/dist;
                  try_files $uri $uri/ /index.html;
              }

              location /api {
                  proxy_pass http://localhost:5000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/uptime
        dest: /etc/nginx/sites-enabled/uptime
        state: link

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: Add MongoDB GPG key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-6.0.asc
        state: present

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/6.0 multiverse"
        state: present
        filename: mongodb-org-6.0

    - name: Install Alerta dependencies
      apt:
        name:
          - python3-pip
          - mongodb-org
          - nginx
          - python3-dev
          - build-essential
          - libffi-dev
        state: present
        update_cache: yes

    - name: Install Alerta via pip
      pip:
        name: alerta-server
        state: present

    - name: Create Alerta configuration directory
      file:
        path: /etc/alerta
        state: directory
        mode: '0755'

    - name: Configure Alerta
      template:
        src: alerta.conf.j2
        dest: /etc/alerta/alerta.conf
        mode: '0644'
      notify: restart alerta

    - name: Configure Nginx for Alerta
      template:
        src: nginx-alerta.conf.j2
        dest: /etc/nginx/sites-available/alerta
      notify: reload nginx

    - name: Enable Alerta site
      file:
        src: /etc/nginx/sites-available/alerta
        dest: /etc/nginx/sites-enabled/alerta
        state: link
      notify: reload nginx

    - name: Create Alerta systemd service
      template:
        src: alerta.service.j2
        dest: /etc/systemd/system/alerta.service
      notify: restart alerta

    - name: Create Alerta user
      user:
        name: alerta
        system: yes
        shell: /bin/false
        home: /opt/alerta

    - name: Set Alerta permissions
      file:
        path: /etc/alerta
        owner: alerta
        group: alerta
        recurse: yes

    - name: Start and enable Alerta
      systemd:
        name: alerta
        state: started
        enabled: yes

    - name: Create Alerta admin user
      command: "alerta user create admin --password {{ alerta_admin_password }} --admin"
      environment:
        FLASK_APP: /usr/local/bin/alertad
      when: alerta_admin_password is defined

    - name: Create Alerta API key
      command: "alerta key create --username admin --scope 'admin,read,write'"
      environment:
        FLASK_APP: /usr/local/bin/alertad
      register: alerta_api_key
      when: alerta_admin_password is defined

    - name: Display Alerta information
      debug:
        msg: 
          - "Alerta web interface is available at: http://{{ ansible_host }}:8080"
          - "API key: {{ alerta_api_key.stdout | default('Not created - password not provided') }}"

  handlers:
    - name: Restart backend service
      systemd:
        name: monitoring-backend
        state: restarted
        daemon_reload: yes
        enabled: yes

    - name: restart alerta
      systemd:
        name: alerta
        state: restarted
        daemon_reload: yes

    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded